name: C++ CI

on:
  push:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    shell: bash

jobs:
  cppcheck:
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CPPCHECK_VER: "2.14.2"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run cppcheck
        uses: ./.github/actions/cppcheck

  clang-tidy:
    name: "Clang-Tidy"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CLANG_VER: 18
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run clang-tidy
        uses: ./.github/actions/clang-tidy

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 8
    permissions:
      attestations: write
      contents: write
      id-token: write
    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      VSCMD_SKIP_SENDTELEMETRY: 1
      MINGW_VER: "13.3.0posix-11.0.1-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64msvcrt-11.0.1-r1.7z"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            c: clang-18
            cxx: clang++-18
            clang_ver: "18"
            clang_ver_full: "18.1.8"
            name: "MSan: Ubuntu 22.04 Clang 18"
            cmake_flags: "-DUSE_MSAN=ON -DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"
            cmake_generator: Ninja
            runs_msan: true

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "ASan: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DUSE_ASAN=ON -DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"
            cmake_generator: Ninja
            runs_asan: true
            asan_name: "-asan"

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "Valgrind: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"
            cmake_generator: Ninja
            runs_valgrind: true

          - os: macos-14
            c: clang
            cxx: clang++
            name: "macOS 14 Apple Clang 15"
            cmake_flags: "-DUSE_ASAN=OFF -DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"
            runs_asan: false

          - os: macos-14
            c: gcc-13
            cxx: g++-13
            name: "macOS 14 GCC 13"
            cmake_flags: "-DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"

          - os: windows-2022
            c: cl
            cxx: cl
            name: "ASan: Windows 2022 MSVC 19.41"
            cmake_flags: "-DUSE_ASAN=ON -DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"
            runs_asan: true

          - os: windows-2022
            c: gcc
            cxx: g++
            name: "Windows 2022 MinGW GCC 13"
            cmake_flags: "-DCMAKE_INCLUDE_PATH=libs/SDL2/include;libs/SDL2_Mixer/include"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install SDL2 and SDL2_mixer libraries
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libsdl2-dev libsdl2-mixer-dev

      - name: Set timestamp and zip name
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}${{ matrix.asan_name }}" | sed 's|/|_|')" >> ${GITHUB_ENV}

      - name: Install packages
        uses: ./.github/actions/install-packages

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: ${{ matrix.cmake_flags }}
          warnings_as_errors: 'ON'

      - name: Build
        run: |
          bash ./scripts/cmake.sh build -t ${{ env.BUILD_TYPE }}

      - name: Install
        run: |
          bash ./scripts/cmake.sh install -i artifacts -t ${{ env.BUILD_TYPE }}

      - name: Move artifacts
        run: |
          mkdir ${{ env.ZIP_NAME }}
          mv artifacts/${{ env.BIN_DIR }}/* ${{ env.ZIP_NAME }}
          ls -la ${{ env.ZIP_NAME }}

      - name: Process artifacts
        uses: ./.github/actions/process-artifacts

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}_${{ env.TIMESTAMP }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 30

      - name: Runtime checks
        uses: ./.github/actions/runtime-checks

      - name: Create release
        uses: ./.github/actions/create-release
        if: startsWith(github.ref, 'refs/tags/')
