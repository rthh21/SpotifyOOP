name: C++ CI

on:
  push:
    branches: ['*'] # Replace with appropriate branch names
    tags: ['*']
  pull_request:
    branches: ['*'] # Replace with appropriate branch names
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin" # Update if changing in your project structure
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == "Linux" ]]; then
          sudo apt update
          sudo apt install -y libsdl2-dev libsdl2-mixer-dev cmake g++
        elif [[ $RUNNER_OS == "macOS" ]]; then
          brew install sdl2 sdl2_mixer cmake
        elif [[ $RUNNER_OS == "Windows" ]]; then
          choco install sdl2 sdl2-mixer cmake
        fi

    - name: Configure CMake
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build with CMake
      run: |
        cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}

    - name: Run Tests
      run: |
        cd ${{ env.BUILD_DIR }}
        ctest --output-on-failure

    - name: Package Build Artifacts
      if: success()
      run: |
        mkdir ${{ env.ZIP_NAME }}
        mv ${{ env.BUILD_DIR }}/bin/* ${{ env.ZIP_NAME }}
        zip -r ${{ env.ZIP_NAME }}.zip ${{ env.ZIP_NAME }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.os }}
        path: ${{ env.ZIP_NAME }}.zip

  cppcheck:
    name: Static Analysis with Cppcheck
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Cppcheck
      run: |
        sudo apt update
        sudo apt install -y cppcheck

    - name: Run Cppcheck
      run: |
        cppcheck --enable=all --inconclusive --error-exitcode=1 --project=compile_commands.json

  clang-tidy:
    name: Code Linting with Clang-Tidy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Clang
      run: |
        sudo apt update
        sudo apt install -y clang clang-tidy

    - name: Run Clang-Tidy
      run: |
        clang-tidy src/*.cpp -- -Iheaders -std=c++23
